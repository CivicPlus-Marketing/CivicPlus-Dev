import { __decorate, __metadata } from "tslib";
import { DynamicOption, Extension, } from '@roots/bud-framework/extension';
import { bind, disabled, expose, label, options, plugin, } from '@roots/bud-framework/extension/decorators';
import isBoolean from '@roots/bud-support/lodash/isBoolean';
import isFunction from '@roots/bud-support/lodash/isFunction';
import Container from '@roots/container';
import ThemeJsonWebpackPlugin from '@roots/wordpress-theme-json-webpack-plugin';
/**
 * WordPress theme.json configuration
 *
 * @example
 * ```ts
 * bud.themeJson(theme =>
 *   theme.set('color', {})
 * )
 * ```
 */
let WordPressThemeJSON = class WordPressThemeJSON extends Extension {
    settings(input, raw) {
        if (!input)
            return this;
        this.enable();
        const value = isFunction(input)
            ? input(raw
                ? this.options.settings
                : this.app.container(this.options.settings))
            : isBoolean(input)
                ? this.options.settings
                : input;
        this.setSettings(value instanceof Container ? value.all() : value);
        return this;
    }
};
__decorate([
    bind
    // @ts-ignore
    ,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Boolean]),
    __metadata("design:returntype", Object)
], WordPressThemeJSON.prototype, "settings", null);
WordPressThemeJSON = __decorate([
    label(`@roots/bud-wordpress-theme-json`),
    options({
        __generated__: undefined,
        customTemplates: undefined,
        path: DynamicOption.make(({ path }) => path(`./theme.json`)),
        patterns: undefined,
        settings: {
            color: {
                custom: false,
                customGradient: false,
            },
            custom: {
                spacing: {},
                typography: { 'font-size': {}, 'line-height': {} },
            },
            spacing: {
                padding: true,
                units: [`px`, `%`, `em`, `rem`, `vw`, `vh`],
            },
            typography: {
                customFontSize: false,
                dropCap: false,
            },
        },
        styles: undefined,
        templateParts: undefined,
        version: undefined,
    }),
    plugin(ThemeJsonWebpackPlugin),
    expose(`wpjson`),
    disabled
], WordPressThemeJSON);
export { WordPressThemeJSON };
