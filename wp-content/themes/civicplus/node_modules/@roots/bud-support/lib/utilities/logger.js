import { __decorate, __metadata } from "tslib";
import Signale from 'signale';
import { bind } from '../decorators/bind.js';
import isUndefined from '../lodash/isUndefined/index.js';
import args from './args.js';
class Logger {
    instance;
    constructor() {
        let options = {};
        if (args.log === false)
            options.disabled = true;
        options.logLevel = args.verbose ? `info` : args.log ? `log` : `warn`;
        if (process.env) {
            options.secrets = Object.entries(process.env)
                .filter((entry) => !isUndefined(entry[1]) && entry[0].includes(`SECRET`))
                .map(([k, v]) => v);
        }
        this.instance = new Signale.Signale(options);
        this.instance.config({ displayLabel: false });
        if (args.silent && !args.log && !args.verbose) {
            this.instance.disable();
        }
    }
    await(...messages) {
        this.instance.await(...messages);
        return this;
    }
    debug(...messages) {
        if (!(`verbose` in args))
            return this;
        this.instance.debug(...messages);
        return this;
    }
    error(...messages) {
        this.instance.error(...messages);
        return this;
    }
    info(...messages) {
        if (!(`verbose` in args))
            return this;
        this.instance.info(...messages);
        return this;
    }
    log(...messages) {
        this.instance.log(...messages);
        return this;
    }
    scope(...scopes) {
        if (scopes.length === 0)
            return this;
        this.instance = this.instance.scope(...(scopes.filter(Boolean) ?? [`bud.js`]));
        return this;
    }
    success(...messages) {
        this.instance.success(...messages);
        return this;
    }
    time(label = `default`) {
        this.instance.time(label);
        return this;
    }
    timeEnd(label = `default`) {
        this.instance.timeEnd(label);
        return this;
    }
    unscope() {
        this.instance.unscope();
        return this;
    }
    warn(...messages) {
        this.instance.warn(...messages);
        return this;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "await", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "debug", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "error", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "info", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "log", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "scope", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "success", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "time", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "timeEnd", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Logger.prototype, "unscope", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Logger.prototype, "warn", null);
let instance = undefined;
export const initialize = () => {
    instance = new Logger();
    instance.log(`logger initialized`);
    return instance;
};
export default instance ?? initialize();
export { instance, Logger };
