/// <reference types="express-serve-static-core" resolution-mode="require"/>
import type { Bud } from '@roots/bud-framework';
import type { Service as BaseService, Connection, Middleware } from '@roots/bud-framework/services/server';
import type { Watcher } from '@roots/bud-server/server/watcher';
import { Service } from '@roots/bud-framework/service';
/**
 * Server service class
 */
export declare class Server extends Service implements BaseService {
    /**
     * Express instance
     */
    application: Express.Application & {
        set: any;
        use: any;
    };
    /**
     * Applied middleware
     */
    appliedMiddleware: Partial<Record<keyof Middleware.Available, any>>;
    /**
     * Available middleware
     */
    availableMiddleware: {
        cookie: string;
        dev: string;
        hot: string;
        proxy: string;
    };
    /**
     * Server connections
     */
    connection: Connection;
    /**
     * Watcher instance
     */
    watcher: Watcher;
    /**
     * Apply middleware
     */
    applyMiddleware(): Promise<void>;
    /**
     * Utilized middleware
     */
    get enabledMiddleware(): BaseService['enabledMiddleware'];
    /**
     * Inject scripts
     */
    injectScripts(): Promise<void>;
    /**
     * Proxy URL
     */
    get proxyUrl(): URL;
    /**
     * External proxy URL
     */
    get publicProxyUrl(): URL;
    /**
     * External development server URL
     */
    get publicUrl(): URL;
    /**
     * {@link Service.register}
     */
    register(bud: Bud): Promise<void>;
    /**
     * Run development server
     */
    run(): Promise<void>;
    /**
     * Set connection
     */
    setConnection(connection?: Connection): Promise<Connection>;
    /**
     * Development server URL
     */
    get url(): URL;
}
