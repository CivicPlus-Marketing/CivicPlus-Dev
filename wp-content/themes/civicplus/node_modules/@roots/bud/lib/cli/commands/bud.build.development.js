import BuildCommand from '@roots/bud/cli/commands/bud.build';
import browser from '@roots/bud/cli/flags/browser';
import hot from '@roots/bud/cli/flags/hot';
import indicator from '@roots/bud/cli/flags/indicator';
import overlay from '@roots/bud/cli/flags/overlay';
import port from '@roots/bud/cli/flags/port';
import proxy from '@roots/bud/cli/flags/proxy';
import reload from '@roots/bud/cli/flags/reload';
/**
 * `bud build development` command
 */
export default class BuildDevelopmentCommand extends BuildCommand {
    /**
     * {@link Command.paths}
     */
    static paths = [
        [`build`, `development`],
        [`dev`],
        [`development`],
    ];
    /**
     * {@link Command.usage}
     */
    static usage = BuildCommand.Usage({
        category: `build`,
        description: `Compiles source assets in \`development\` mode.`,
        details: `\
      \`bud build development\` compiles source assets in \`development\` mode.
    `,
        examples: [
            [`compile source and serve`, `$0 build development`],
            [
                `open project in system default browser`,
                `$0 build development --browser`,
            ],
            [
                `do not force reload in the browser when encountering a fatal HMR error`,
                `$0 build development --no-reload`,
            ],
            [
                `do not display an error overlay when encountering errors in application code`,
                `$0 build development --no-overlay`,
            ],
        ],
    });
    browser = browser;
    hot = hot;
    indicator = indicator;
    overlay = overlay;
    port = port;
    proxy = proxy;
    reload = reload;
    /**
     * {@link Command.withSubcommandContext}
     */
    withSubcommandContext = async (context) => {
        return {
            ...context,
            browser: this.browser,
            hot: this.hot,
            indicator: this.indicator,
            mode: `development`,
            overlay: this.overlay,
            port: this.port,
            proxy: this.proxy,
            reload: this.reload,
        };
    };
}
