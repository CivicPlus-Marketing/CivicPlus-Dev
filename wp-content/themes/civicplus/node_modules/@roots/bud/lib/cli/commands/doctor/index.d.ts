import type { Bud } from '@roots/bud';
import type { Extension } from '@roots/bud-framework/extension';
import type { Context } from '@roots/bud-framework/options';
import webpack from '@roots/bud-support/webpack';
import BudCommand from '@roots/bud/cli/commands/bud';
/**
 * bud doctor command
 */
export default class BudDoctorCommand extends BudCommand {
    static paths: string[][];
    static usage: import("@roots/bud-support/clipanion").Usage;
    configuration: Bud[`build`][`config`];
    disabledExtensions: Array<[string, Extension]>;
    enabledExtensions: Array<[string, Extension]>;
    entrypoints: Array<[string, webpack.EntryObject]>;
    makeTimer: () => () => string;
    resolvedDependencies: Record<string, string>;
    timings: Record<string, string>;
    /**
     * {@link Command.withContext}
     */
    withContext: (context: Context) => Promise<{
        cache: boolean;
        dry: boolean;
        silent: boolean;
        _?: Record<string, any>;
        basedir: string;
        bin?: "node" | "bun" | "ts-node";
        browser?: string | boolean;
        bud: {
            label: string;
            manifestPath: string;
            version: string;
        };
        ci?: boolean;
        clean?: boolean;
        debug?: boolean;
        dependsOn?: string[];
        devtool?: false | "cheap-module-source-map" | "cheap-source-map" | "eval-cheap-module-source-map" | "eval-cheap-source-map" | "eval-nosources-cheap-modules-source-map" | "eval-nosources-cheap-source-map" | "eval-nosources-source-map" | "eval-source-map" | "eval" | "hidden-cheap-module-source-map" | "hidden-cheap-source-map" | "hidden-nosources-cheap-module-source-map" | "hidden-nosources-cheap-source-map" | "hidden-nosources-source-map" | "hidden-source-map" | "inline-cheap-module-source-map" | "inline-cheap-source-map" | "inline-nosources-cheap-module-source-map" | "inline-nosources-cheap-source-map" | "inline-nosources-source-map" | "inline-source-map" | "nosources-cheap-module-source-map" | "nosources-cheap-source-map" | "source-map";
        discover?: boolean;
        editor?: string | boolean;
        env: Record<string, string>;
        esm?: boolean;
        extensions: {
            builtIn: string[];
            discovered: string[];
        };
        files: Record<string, import("@roots/bud-framework/options").File>;
        filter?: string[];
        force?: boolean;
        hash?: boolean;
        hot?: boolean;
        html?: string | boolean;
        immutable?: boolean;
        indicator?: boolean;
        input?: string;
        label?: string;
        log?: boolean;
        manifest: Record<string, any>;
        minimize?: boolean;
        mode: "development" | "production";
        modules?: string;
        notify?: boolean;
        output?: string;
        overlay?: boolean;
        paths?: {
            "os-cache": string;
            "os-config": string;
            "os-data": string;
            "os-log": string;
            "os-temp": string;
            basedir: string;
            hash: string;
            storage: string;
        };
        port?: string;
        proxy?: string;
        publicPath?: string;
        reload?: boolean;
        root?: import("@roots/bud-framework").Bud;
        runtime?: boolean | "multiple" | "single";
        services: string[];
        splitChunks?: boolean;
        storage?: string;
        target?: string[];
        use?: string[];
        verbose?: boolean;
    }>;
    /**
     * Execute command
     */
    execute(): Promise<void>;
    formatDepCheck([dependency, requestedVersion]: [any, any], key: number | string): import("react/jsx-runtime").JSX.Element;
    ls(path: string): Promise<import("react/jsx-runtime").JSX.Element[]>;
    mapEntrypoints(entrypoints: Array<[string, webpack.EntryObject]>): import("react/jsx-runtime").JSX.Element[];
    mapExtensions(extensions: Array<[string, Extension]>): import("react/jsx-runtime").JSX.Element[];
    packageCheck(signifier: string): Promise<import("react/jsx-runtime").JSX.Element>;
    seconds(hrTime: [number, number]): string;
}
