/// <reference types="node" resolution-mode="require"/>
/// <reference types="react" />
import type { Context } from '@roots/bud-framework/options/context';
import type { BaseContext } from '@roots/bud-support/clipanion';
import { Bud } from '@roots/bud-framework';
import { Command, Option } from '@roots/bud-support/clipanion';
import { BudHandler } from '@roots/bud-support/errors';
import type { CLIContext } from '../index.js';
export type { BaseContext, Context };
export { Option };
/**
 * Bud command
 */
export default class BudCommand extends Command<CLIContext> {
    /**
     * {@link Command.paths}
     */
    static paths: any[][];
    /**
     * {@link Command.usage}
     */
    static usage: import("@roots/bud-support/clipanion").Usage;
    basedir: string;
    /**
     * Bud instance
     */
    bud?: Bud | undefined;
    color: boolean;
    /**
     * {@link Command.context}
     */
    context: CLIContext;
    debug: boolean;
    dry: boolean;
    filter: string[];
    log: boolean;
    mode: "development" | "production";
    notify: boolean;
    render: <Props, K extends NodeJS.WriteStream | import("@roots/bud-support/ink").RenderOptions>(tree: import("react").ReactElement<Props, string | import("react").JSXElementConstructor<any>>, options?: K) => import("@roots/bud-support/ink").Instance;
    silent: boolean;
    verbose: boolean;
    /**
     * withContext
     *
     * @remarks
     * For extending the context object from subcommands
     */
    withContext?: (context: Omit<Context, `stderr` | `stdio` | `stdout`>) => Promise<Context>;
    /**
     * withSubcommandContext
     *
     * @remaks
     * For extending the context object from subcommands
     */
    withSubcommandContext?: (context: Context) => Promise<Context>;
    /**
     * Execute arbitrary sh command with inherited stdio
     */
    $(bin: string, args: Array<string>, options?: {}): Promise<import("execa").ExecaReturnValue<string>>;
    /**
     * Apply context from argv to bud.js instance
     */
    applyBudArguments(bud: BudCommand[`bud`]): Promise<void>;
    /**
     * Apply context from env to bud.js instance
     */
    applyBudEnv(bud: Bud): Promise<void>;
    /**
     * Apply context from manifest to bud.js instance
     */
    applyBudManifestOptions(bud: Bud): Promise<void>;
    /**
     * Binary (node, ts-node, bun)
     *
     * @remarks
     * String like `node`, `ts-node`, or `bun`. For executing child
     * processes with the same binary as the parent.
     */
    get bin(): string;
    /**
     * Handle errors
     */
    catch(err: BudHandler): Promise<void>;
    /**
     * {@link Command.execute}
     */
    execute(): Promise<void>;
    /**
     * Check bud.js system and environment requirements are met
     */
    healthcheck(_bud: any): Promise<void>;
    makeBud(): Promise<Bud>;
    renderStatic(...children: Array<React.ReactElement>): Promise<void>;
}
