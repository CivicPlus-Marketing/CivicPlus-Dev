import type { Compilation, Compiler } from '@roots/bud-framework/config';
import { Extension } from '@roots/bud-framework/extension';
/**
 * Webpack lifecycle plugin
 */
export default class BudWebpackLifecyclePlugin extends Extension {
    additionalPass(): Promise<void>;
    afterCompile(compilation: Compilation): Promise<void>;
    afterEmit(compilation: Compilation): Promise<void>;
    afterEnvironment(): void;
    afterPlugins(): void;
    /**
     * {@link Extension.apply}
     */
    apply(compiler: Compiler): void;
    assetEmitted(file: string, info: {
        compilation: Compilation;
        content: string;
        outputPath: string;
        source: string;
        targetPath: string;
    }): Promise<void>;
    beforeCompile(compilationParams: any): Promise<void>;
    beforeRun(compiler: Compiler): Promise<void>;
    compile(...compilationParams: any[]): void;
    emit(compilation: Compilation): Promise<void>;
    environment(): void;
    failed(error: Error): void;
    initialize(): void;
    invalid(): void;
    run(compiler: Compiler): Promise<void>;
    shouldEmit(): boolean;
    thisCompilation(compilation: Compilation): void;
}
