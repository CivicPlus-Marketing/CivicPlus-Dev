import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, label } from '@roots/bud-framework/extension/decorators';
/**
 * Webpack lifecycle plugin
 */
let BudWebpackLifecyclePlugin = class BudWebpackLifecyclePlugin extends Extension {
    async additionalPass() { }
    async afterCompile(compilation) {
        this.logger.log(`compilation completed:`, compilation.hash);
        this.logger.timeEnd(`compile`);
    }
    async afterEmit(compilation) {
        this.logger.timeEnd(`emit`);
    }
    afterEnvironment() { }
    afterPlugins() { }
    /**
     * {@link Extension.apply}
     */
    apply(compiler) {
        ;
        [
            `environment`,
            `afterEnvironment`,
            `afterResolvers`,
            `afterPlugins`,
            `compile`,
            `failed`,
            `invalid`,
            `initialize`,
            `shouldEmit`,
            `thisCompilation`,
        ]
            .filter(k => compiler.hooks[k])
            .filter(k => this[k])
            .map(k => compiler.hooks[k].tap(this.label, this[k]));
        [
            `additionalPass`,
            `afterCompile`,
            `afterEmit`,
            `assetEmitted`,
            `beforeCompile`,
            `beforeRun`,
            `emit`,
            `run`,
        ]
            .filter(k => compiler.hooks[k])
            .filter(k => this[k])
            .map(k => compiler.hooks[k].tapPromise(this.label, async (...args) => {
            try {
                await this[k](...args);
            }
            catch (error) {
                this.logger.error(error);
            }
        }));
    }
    async assetEmitted(file, info) {
        this.logger.log(`asset emitted:`, file, `=>`, this.app.relPath(info.targetPath));
    }
    async beforeCompile(compilationParams) { }
    async beforeRun(compiler) {
        this.logger.log(`beforeRun`, compiler.name);
    }
    compile(...compilationParams) { }
    async emit(compilation) {
        this.logger.time(`emit`);
    }
    environment() { }
    failed(error) {
        this.logger.error(`compilation failed`);
        if (error.message.includes(`Module not found: Error: Can't resolve 'index' in '${this.app.path(`@src`)}'`) &&
            !this.app.hooks.filter(`build.entry`)) {
            this.logger.error(`\n\nNo entrypoints found.\n\nEither create a file at ${this.app.relPath(`@src`, `index.js`)} or use the bud.entry method to specify an entrypoint.`);
        }
    }
    initialize() { }
    invalid() { }
    async run(compiler) {
        this.logger.log(`run`, compiler.name);
    }
    shouldEmit() {
        // @ts-ignore
        const emitCheck = this.app.context.dry !== true;
        emitCheck ? this.logger.success(`emit`) : this.logger.log(`dry run`);
        return emitCheck;
    }
    thisCompilation(compilation) {
        this.logger.time(`compile`);
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "additionalPass", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "afterCompile", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "afterEmit", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "afterEnvironment", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "afterPlugins", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "apply", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "assetEmitted", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "beforeCompile", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "beforeRun", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "compile", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "emit", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "environment", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Error]),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "failed", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "initialize", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "invalid", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudWebpackLifecyclePlugin.prototype, "run", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "shouldEmit", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], BudWebpackLifecyclePlugin.prototype, "thisCompilation", null);
BudWebpackLifecyclePlugin = __decorate([
    label(`@roots/bud-extensions/webpack-lifecycle-plugin`)
], BudWebpackLifecyclePlugin);
export default BudWebpackLifecyclePlugin;
