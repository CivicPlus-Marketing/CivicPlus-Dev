import { __decorate, __metadata } from "tslib";
import { Extension, } from '@roots/bud-framework/extension';
import { bind, deprecated, options, } from '@roots/bud-framework/extension/decorators';
/**
 * Terser configuration
 */
let BudMinimizeJSPublicApi = class BudMinimizeJSPublicApi extends Extension {
    /**
     * @deprecated Use {@link BudTerser.dropComments} instead
     */
    comments(comments = true) {
        this.set(`terserOptions.format.comments`, comments);
        return this;
    }
    /**
     * @deprecated Use {@link BudTerser.dropDebugger} instead
     */
    debugger(enable = true) {
        this.set(`terserOptions.compress.drop_debugger`, enable);
        return this;
    }
    /**
     * Drop comments
     */
    dropComments(enable = true) {
        this.set(`terserOptions.format.comments`, !enable);
        return this;
    }
    /**
     * Drop console
     */
    dropConsole(enable = true) {
        this.set(`terserOptions.compress.drop_console`, enable);
        return this;
    }
    /**
     * Drop debugger statements
     */
    dropDebugger(enable = true) {
        this.set(`terserOptions.compress.drop_debugger`, enable);
        return this;
    }
    /**
     * Mangle output
     * @deprecated Use {@link BudTerser.set} instead
     *
     * @example
     * ```js
     * bud.minify.js.set(`terserOptions.mangle`, {})
     * ```
     */
    mangle(mangle) {
        this.set(`terserOptions.mangle`, mangle);
        return this;
    }
    /**
     * @deprecated Use {@link BudTerser.set} instead
     *
     * @example
     * ```js
     * bud.minify.js.set(`terserOptions.minify`, () => {})
     * ```
     */
    setMinifier(minify) {
        this.set(`minify`, minify);
        return this;
    }
};
__decorate([
    deprecated(`bud.minify.js`, `Use bud.minify.js.dropComments instead`, [
        [`Drop comments`, `bud.minify.js.dropComments()`],
        [`Preserve comments`, `bud.minify.js.dropComments(false)`],
        [
            `Alternative (using bud.minify.js.set)`,
            `bud.minify.js.set('terserOptions.format.comments', true)`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudMinimizeJSPublicApi.prototype, "comments", null);
__decorate([
    deprecated(`bud.minify.js`, `Use bud.minify.js.dropDebugger instead`, [
        [`Drop debugger statements`, `bud.minify.js.dropDebugger()`],
        [`Preserve debugger statements`, `bud.minify.js.dropDebugger(false)`],
        [
            `Alternative (using bud.minify.js.set)`,
            `bud.minify.js.set('terserOptions.compress.drop_debugger', true)`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudMinimizeJSPublicApi.prototype, "debugger", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudMinimizeJSPublicApi.prototype, "dropComments", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudMinimizeJSPublicApi.prototype, "dropConsole", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Object)
], BudMinimizeJSPublicApi.prototype, "dropDebugger", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudMinimizeJSPublicApi.prototype, "mangle", null);
__decorate([
    deprecated(`bud.minify.js`, `Use bud.minify.js.setMinify instead`, [
        [
            `Set the minifier`,
            `bud.minify.js.set('terserOptions.minify', () => minifier)`,
        ],
    ]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudMinimizeJSPublicApi.prototype, "setMinifier", null);
BudMinimizeJSPublicApi = __decorate([
    options({
        exclude: undefined,
        extractComments: false,
        include: undefined,
        minify: undefined,
        parallel: true,
        terserOptions: {
            compress: {
                defaults: true,
                drop_console: false,
                drop_debugger: true,
                unused: true,
            },
            ecma: undefined,
            enclose: undefined,
            format: {
                ascii_only: true,
                comments: false,
            },
            ie8: undefined,
            keep_classnames: undefined,
            keep_fnames: undefined,
            mangle: {
                safari10: true,
            },
            module: undefined,
            nameCache: undefined,
            parse: undefined,
            safari10: undefined,
            sourceMap: undefined,
            toplevel: undefined,
        },
    })
], BudMinimizeJSPublicApi);
export { BudMinimizeJSPublicApi, };
