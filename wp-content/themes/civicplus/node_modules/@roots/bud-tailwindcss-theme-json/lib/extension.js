import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, label } from '@roots/bud-framework/extension/decorators';
import * as tailwindAdapter from './tailwind/index.js';
/**
 * Support Tailwind values in {@link Bud.wpjson}
 */
export let TailwindThemeJSON = class TailwindThemeJSON extends Extension {
    /**
     * {@link Extension.register}
     */
    async register(bud) {
        if (!(`wpjson` in bud))
            return;
        bud.wpjson.useTailwindColors = this.useTailwindColors.bind(bud.wpjson);
        bud.wpjson.useTailwindFontFamily = this.useTailwindFontFamily.bind(bud.wpjson);
        bud.wpjson.useTailwindFontSize = this.useTailwindFontSize.bind(bud.wpjson);
    }
    /**
     * Use tailwind colors in theme.json
     */
    useTailwindColors(extendOnly) {
        const palette = tailwindAdapter.palette.transform(Object.assign({}, { ...this.app.tailwind.resolveThemeValue(`colors`, extendOnly) }));
        this.setSettings(settings => ({
            ...(settings ?? {}),
            color: {
                ...(settings.color ?? {}),
                palette,
            },
        }));
        return this.enable();
    }
    /**
     * Use tailwind fontFamily in theme.json
     */
    useTailwindFontFamily(extendOnly) {
        const fontFamilies = tailwindAdapter.fontFamily.transform(Object.assign({}, { ...this.app.tailwind.resolveThemeValue(`fontFamily`, extendOnly) }));
        this.setSettings(settings => ({
            ...(settings ?? {}),
            typography: {
                ...(settings.typography ?? {}),
                fontFamilies,
            },
        }));
        return this.enable();
    }
    /**
     * Use tailwind fontSize in theme.json
     */
    useTailwindFontSize(extendOnly) {
        const fontSizes = tailwindAdapter.fontSize.transform(Object.assign({}, { ...this.app.tailwind.resolveThemeValue(`fontSize`, extendOnly) }));
        this.setSettings(settings => ({
            ...(settings ?? {}),
            typography: {
                ...(settings.typography ?? {}),
                fontSizes,
            },
        }));
        return this.enable();
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], TailwindThemeJSON.prototype, "register", null);
TailwindThemeJSON = __decorate([
    label(`@roots/bud-tailwindcss-theme-json`)
], TailwindThemeJSON);
