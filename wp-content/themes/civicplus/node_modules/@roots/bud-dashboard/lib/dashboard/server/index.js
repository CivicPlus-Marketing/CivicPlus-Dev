import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
// @ts-nocheck
import figures from '@roots/bud-support/figures';
import { Box, Text } from '@roots/bud-support/ink';
import { externalNetworkInterface } from '@roots/bud-support/os';
import React from 'react';
import Space from '../display/space.component.js';
import Title from '../display/title.component.js';
import { color } from '../format.js';
import useWatchedFilesCount from './useWatchedFilesCount.js';
/**
 * Server info ink component
 */
export const Server = ({ devUrl, displayServerInfo, proxyUrl, publicDevUrl, publicProxyUrl, watchFiles = new Set(), }) => {
    const ipv4 = externalNetworkInterface.ipv4Url(publicDevUrl.protocol);
    ipv4.port = publicDevUrl.port;
    const watchedFilesCount = useWatchedFilesCount(watchFiles);
    return (_jsxs(Box, { flexDirection: "column", children: [_jsxs(Box, { flexDirection: "row", children: [_jsxs(Text, { dimColor: true, children: [figures.lineDownRightArc, figures.line] }), _jsxs(Text, { color: color.blue, dimColor: !displayServerInfo, children: [` `, "server"] })] }), displayServerInfo && (_jsxs(_Fragment, { children: [_jsx(Space, { children: _jsx(Text, { children: " " }) }), _jsxs(Box, { flexDirection: "column", children: [proxyUrl && (_jsx(Title, { children: _jsxs(Text, { children: ["proxy:", ` `, publicProxyUrl && publicProxyUrl.href !== proxyUrl.href
                                            ? `${publicProxyUrl.href}`
                                            : proxyUrl.href] }) })), devUrl && (_jsx(Title, { children: _jsxs(Text, { children: ["dev:", `   `, publicDevUrl && publicDevUrl.href !== devUrl.href
                                            ? `${publicDevUrl.href}`
                                            : devUrl.href] }) }))] }), _jsx(Space, { children: _jsx(Text, { children: " " }) }), _jsx(Title, { final: true, finalFigure: figures.lineUpRightArc, children: _jsxs(Text, { dimColor: true, children: ["watching project sources", watchedFilesCount > 0 ? (_jsxs(Text, { dimColor: true, children: [` `, "(and ", watchedFilesCount, " other", ` `, watchedFilesCount > 1 ? `files` : `file`, ")", ` `] })) : null] }) })] }))] }));
};
