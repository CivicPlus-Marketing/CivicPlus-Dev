/// <reference types="node" resolution-mode="require"/>
import type { Notification as NodeNotification, NotificationCallback } from '@roots/bud-support/node-notifier';
import { type Bud } from '@roots/bud-framework';
import { Service } from '@roots/bud-framework/service';
interface Notification extends NodeNotification {
    actions?: string | string[] | undefined;
    closeLabel?: string | undefined;
    contentImage?: string | undefined;
    dropdownLabel?: string | undefined;
    group?: string;
    open?: string | undefined | URL;
    reply?: boolean | undefined;
    sound?: boolean | string | undefined;
    subtitle?: string | undefined;
    timeout?: false | number | undefined;
}
/**
 * Notifier
 */
export declare class Notifier extends Service {
    /**
     * Browser to open on error
     */
    browser: boolean | string;
    /**
     * Track if browser has already been opened once
     * to prevent multiple browser tabs from opening
     * when changes are saved.
     *
     * When {@link Notifier.openBrowser} is called and this
     * prop is true the call exits early. Otherwise, the
     * browser is opened and this prop is set to true.
     *
     * @see {@link https://github.com/roots/bud/issues/2041}
     */
    browserOpened: boolean;
    /**
     * Editor to open on error
     */
    editor: boolean | string;
    /**
     * Node-notifier notification center instance
     */
    notificationCenter: {
        notify(notification?: Notification, callback?: NotificationCallback): Notifier[`notificationCenter`];
    };
    /**
     * {@link Service.boot}
     */
    boot(bud: Bud): Promise<void>;
    /**
     * True if notifications are enabled
     */
    get notificationsEnabled(): boolean;
    /**
     * Emit OS notification center notice
     */
    notify(notification: Notification, callback?: NotificationCallback): void;
    /**
     * Open browser in development
     */
    openBrowser(url: string): Promise<import("child_process").ChildProcess>;
    /**
     * True if browser opening is enabled
     */
    get openBrowserEnabled(): boolean;
    /**
     * Open editor on error
     */
    openEditor(input: Array<string> | string): void;
    /**
     * True if editor opening is enabled
     */
    get openEditorEnabled(): boolean;
}
export {};
