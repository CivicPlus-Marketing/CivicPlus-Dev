var _a;
import { __decorate, __metadata } from "tslib";
import { bind } from '@roots/bud-support/decorators/bind';
import { InputError } from '@roots/bud-support/errors';
import isFunction from '@roots/bud-support/lodash/isFunction';
import isString from '@roots/bud-support/lodash/isString';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
import logger from '@roots/bud-support/logger';
import { bootstrap } from './lifecycle/bootstrap.js';
/**
 * Bud core class
 */
export class Bud {
    /**
     * Boot application services
     */
    async boot() {
        await this.executeServiceCallbacks(`boot`);
    }
    /**
     * Bootstrap the application
     */
    async bootstrap() {
        await this.executeServiceCallbacks(`bootstrap`);
    }
    /**
     * Log error
     */
    error(...messages) {
        logger.scope(this.label).error(...messages);
        return this;
    }
    /**
     * Execute service callbacks for a given stage
     *
     * @param stage - `bootstrap`, `register`, or `boot`
     * @returns Bud (promise)
     */
    async executeServiceCallbacks(stage) {
        await this.hooks.fire(stage, this);
        if (this.api?.queue?.length)
            await this.api.processQueue();
        return this;
    }
    /**
     * True when child compilers
     * @readonly
     */
    get hasChildren() {
        return this.children && Object.entries(this.children).length > 0;
    }
    /**
     * Log info
     */
    info(...messages) {
        logger.scope(this.label).info(...messages);
        return this;
    }
    /**
     * True when current instance is a child instance
     * @readonly
     */
    get isChild() {
        return this.root?.context?.label !== this.context?.label;
    }
    /**
     * True when {@link Bud.mode} is `development`
     * @readonly
     */
    get isDevelopment() {
        return this.mode === `development`;
    }
    /**
     * True when {@link Bud.mode} is `production`
     * @readonly
     */
    get isProduction() {
        return this.mode === `production`;
    }
    /**
     * True when current instance is the parent instance
     * @readonly
     */
    get isRoot() {
        return this.root?.context?.label === this.context?.label;
    }
    /**
     * Label
     * @readonly
     */
    get label() {
        return this.context?.label;
    }
    async lifecycle(context) {
        Object.assign(this, {}, { context: { ...context } });
        await bootstrap.bind(this)();
        return this;
    }
    /**
     * Log message
     */
    log(...messages) {
        logger.scope(this.label).log(...messages);
        return this;
    }
    /**
     * Creates a child with `bud.create` but returns the parent instance
     */
    async make(request, setupFn) {
        if (!this.isRoot) {
            throw new InputError(`bud.make: must be called from the root context`);
        }
        const context = isString(request)
            ? { ...this.context, label: request, root: this }
            : { ...this.context, ...request, root: this };
        if (isUndefined(context.label)) {
            throw new InputError(`bud.make: context.label must be a string`);
        }
        if (!isUndefined(this.context.filter) &&
            !this.context.filter.includes(context.label)) {
            this.log(`skipping child instance based on --filter flag:`, context.label);
            return this;
        }
        if (!this.children) {
            this.children = {};
        }
        if (this.children[context.label]) {
            throw new InputError(`bud.make: child instance ${context.label} already exists`);
        }
        this.log(`instantiating new bud instance`);
        this.children[context.label] =
            await new this.implementation().lifecycle({
                ...context,
            });
        if (setupFn)
            await setupFn(this.children[context.label]);
        await this.children[context.label].api.processQueue();
        this.get(context.label).hooks.on(`build.dependencies`, typeof request !== `string` && request.dependsOn
            ? request.dependsOn
            : Object.values(this.children)
                .map(({ label }) => label)
                .filter(label => label !== context.label));
        return this;
    }
    /**
     * Compilation mode
     *
     * @remarks
     * Either `production` or `development`.
     *
     * @readonly
     * @defaultValue `production`
     */
    get mode() {
        return this.context.mode ?? `production`;
    }
    /**
     * Register application services
     */
    async register() {
        await this.executeServiceCallbacks(`register`);
    }
    /**
     * Parent {@link Bud} instance
     * @readonly
     */
    get root() {
        return this.context?.root ?? this;
    }
    /**
     * Set a value on the current instance
     * @param key - key
     * @param value - value
     * @param bind - bind value to current instance (default: true, if bindable)
     */
    set(key, value, bind = true) {
        if (bind && isFunction(value) && `bind` in value) {
            return Object.assign(this, { [key]: value.bind(this) });
        }
        return Object.assign(this, { [key]: value });
    }
    /**
     * Log success
     */
    success(...messages) {
        logger.scope(this.label).success(...messages);
        return this;
    }
    /**
     * Log warning
     */
    warn(...messages) {
        logger.scope(this.label).warn(...messages);
        return this;
    }
}
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Bud.prototype, "boot", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Bud.prototype, "bootstrap", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Bud)
], Bud.prototype, "error", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Bud.prototype, "executeServiceCallbacks", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "info", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Bud.prototype, "lifecycle", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "log", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Function]),
    __metadata("design:returntype", Promise)
], Bud.prototype, "make", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Bud.prototype, "register", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_a = typeof K !== "undefined" && K) === "function" ? _a : Object, Object, Boolean]),
    __metadata("design:returntype", Bud)
], Bud.prototype, "set", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "success", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], Bud.prototype, "warn", null);
