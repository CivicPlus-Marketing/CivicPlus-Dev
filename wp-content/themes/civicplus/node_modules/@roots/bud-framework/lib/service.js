import camelCase from '@roots/bud-support/lodash/camelCase';
import logger from '@roots/bud-support/logger';
import Container from '@roots/container';
/**
 * Service
 *
 * @remarks
 * The Service interface provides access to the Bud parent container.
 *
 * A Service interfaces with the Framework through a series of callbacks at different points in the build.
 */
class Base {
    _app;
    /**
     * Service ID
     */
    ident;
    /**
     * Class constructor
     */
    constructor(_app) {
        this._app = _app;
    }
    /**
     * Bud instance
     * @readonly
     */
    get app() {
        return this._app();
    }
    /**
     * Lifecycle method: boot
     *
     * @remarks
     * `boot` is called once all services are registered.
  
     */
    async boot(_app) { }
    /**
     * Lifecycle method: bootstrap
     *
     * @remarks
     * `bootstrap` is called when the Service is instantiated (but before all services are guaranteed to be instantiated).
     */
    async bootstrap(_app) { }
    /**
     * Service label
     */
    get label() {
        return this.ident ?? camelCase(this.constructor.name);
    }
    /**
     * Logger instance
     */
    get logger() {
        return logger.scope(this.app.label, camelCase(this.constructor.name));
    }
    /**
     * Lifecycle method: register
     *
     * @remarks
     * Intended for Service instances to register functionalities, modules,
     * and bind functions to {@link Bud}
     */
    async register(_app) { }
}
/**
 * Service
 *
 * @remarks
 * The Service interface provides access to the {@link Bud} container.
 *
 * A Service interfaces with the Framework through a series of callbacks at different points in the build.
 */
class BaseContainer extends Container {
    _app;
    /**
     * Class constructor
     */
    constructor(_app) {
        super();
        this._app = _app;
    }
    /**
     * Bud instance
     * @readonly
     */
    get app() {
        return this._app();
    }
    /**
     * Lifecycle method: boot
     *
     * @remarks
     * `boot` is called once all services are registered.
     */
    async boot(app) { }
    /**
     * Lifecycle method: bootstrap
     *
     * @remarks
     * `bootstrap` is called when the Service is instantiated (but before all services are guaranteed to be instantiated).
     */
    async bootstrap(app) { }
    /**
     * Logger instance
     */
    get logger() {
        return logger.scope(this.app.label, camelCase(this.constructor.name));
    }
    /**
     * Lifecycle method: register
     *
     * @remarks
     * Intended for Service instances to register functionalities, modules,
     * and bind functions to {@link Bud}
     */
    async register(app) { }
}
export { Base, Base as Service, Base as default, BaseContainer, BaseContainer as ServiceContainer, };
