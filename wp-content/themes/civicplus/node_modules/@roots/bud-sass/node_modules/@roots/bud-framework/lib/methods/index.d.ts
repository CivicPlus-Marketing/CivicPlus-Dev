import type { Bud } from '../index.js';
import { after } from './after/after.js';
import { close } from './close.js';
import { container } from './container.js';
import { get } from './get.js';
import { glob, globSync } from './glob/glob.js';
import { maybeCall } from './maybeCall.js';
import { path } from './path/path.js';
import { pipe } from './pipe/pipe.js';
import { processConfigs } from './processConfigs.js';
import { publicPath } from './publicPath.js';
import { relPath } from './relPath.js';
import { run } from './run.js';
import { sequenceSync } from './sequence.js';
import { setPath } from './setPath/setPath.js';
import { setPublicPath } from './setPublicPath.js';
import { sh } from './sh.js';
import { tap, tapAsync } from './tap.js';
import { when } from './when.js';
type methods = Partial<{
    [K in keyof Bud as `${K & string}`]: Bud[K];
}>;
declare const methods: {
    after: after;
    close: typeof close;
    container: container<any>;
    get: get;
    glob: glob;
    globSync: globSync;
    maybeCall: maybeCall;
    path: path;
    pipe: pipe;
    processConfigs: processConfigs;
    publicPath: publicPath;
    relPath: relPath;
    run: run;
    sequence: (fns: import("./sequence.js").Callback[]) => Promise<Bud>;
    sequenceSync: sequenceSync;
    setPath: setPath;
    setPublicPath: setPublicPath;
    sh: sh;
    tap: tap<Bud>;
    tapAsync: tapAsync<Bud>;
    when: typeof when;
};
export default methods;
