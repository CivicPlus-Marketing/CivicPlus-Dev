import ModernError from 'modern-errors';
const BudBaseError = ModernError.subclass(`BaseError`, {});
class BudHandler extends BudBaseError {
    isBudError = true;
    constructor(message, options) {
        super(message, options);
        this.thrownBy = options?.props?.thrownBy ?? false;
        this.instance = options?.props?.instance ?? `default`;
        this.origin = options?.props?.origin ?? false;
        this.details = options?.props?.details ?? false;
        this.issues = options?.props?.issues ?? false;
        this.docs = options?.props?.docs ?? false;
        this.isBudError = true;
    }
}
const BudError = BudBaseError.subclass(`BudError`, {
    custom: BudHandler,
});
const ModuleError = BudBaseError.subclass(`ModuleError`, {
    custom: BudHandler,
});
const ConfigError = BudBaseError.subclass(`ConfigurationError`, {
    custom: BudHandler,
});
const InputError = BudBaseError.subclass(`InputError`, {
    custom: BudHandler,
});
const CompilerError = BudBaseError.subclass(`CompilerError`, {
    custom: BudHandler,
});
const ServerError = BudBaseError.subclass(`ServerError`, {
    custom: BudHandler,
});
const ExtensionError = BudBaseError.subclass(`ExtensionError`, {
    custom: BudHandler,
});
export { BudError, BudHandler, CompilerError, ConfigError, ExtensionError, InputError, ModuleError, ServerError, };
