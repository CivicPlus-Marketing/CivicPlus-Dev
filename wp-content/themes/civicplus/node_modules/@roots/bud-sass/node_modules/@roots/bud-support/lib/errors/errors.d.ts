import type { InstanceOptions } from 'modern-errors';
interface BudErrorProps {
    details: string;
    docs: URL;
    file: {
        module: any;
        name: string;
        path: string;
        sha1: string;
    };
    instance: string;
    isBudError: true;
    issues: URL;
    message: string;
    origin: BudHandler;
    thrownBy: string;
}
declare const BudBaseError: import("modern-errors").ErrorSubclassCore<[], {}, import("modern-errors").CustomClass>;
declare class BudHandler extends BudBaseError {
    details: false | string;
    docs: false | URL;
    file: {
        module: any;
        name: string;
        path: string;
        sha1: string;
    };
    instance: `default` | string;
    isBudError: boolean;
    issues: false | URL;
    origin: BudHandler | false;
    thrownBy: false | string;
    constructor(message: string, options?: InstanceOptions & {
        props?: Partial<BudErrorProps>;
    });
}
declare const BudError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
declare const ModuleError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
declare const ConfigError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
declare const InputError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
declare const CompilerError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
declare const ServerError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
declare const ExtensionError: import("modern-errors").ErrorSubclassCore<[], {}, typeof BudHandler>;
export { BudError, BudHandler, CompilerError, ConfigError, ExtensionError, InputError, ModuleError, ServerError, };
