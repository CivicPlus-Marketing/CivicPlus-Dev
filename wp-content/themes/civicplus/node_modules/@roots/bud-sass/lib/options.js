import { __decorate, __metadata } from "tslib";
import { Extension, } from '@roots/bud-framework/extension';
import { bind, options } from '@roots/bud-framework/extension/decorators';
export let BudSassOptions = class BudSassOptions extends Extension {
    /**
     * Import a partial globally
     *
     * @remarks
     * Used to import a partial globally (such as a `variables.scss` file)
     *
     * @example
     * With a single module signifier:
     * ```ts
     * bud.sass.importGlobal('styles/variables.scss')
     * ```
     *
     * @example
     * With an array of module signifiers:
     * ```ts
     * bud.sass.importGlobal([
     *  'styles/variables.scss',
     *  'styles/mixins.scss',
     * ])
     * ```
     *
     * @see {@link options.additionalData}
     */
    importGlobal(data) {
        const globals = (Array.isArray(data) ? data : [data])
            .map(str => str.trim())
            .filter(Boolean)
            .map(item => `@import "${item}";`);
        return this.registerGlobal(globals);
    }
    /**
     * Register global stylsheet
     *
     * @remarks
     * Used to register styles which are included globally
     *
     * @example
     * ```ts
     * bud.sass.registerGlobal(`$primary-color: #ff0000;`)
     * ```
     *
     * @see {@link Options.additionalData}
     */
    registerGlobal(additionalData) {
        this.setAdditionalData((data = ``) => {
            const processedString = (Array.isArray(additionalData) ? additionalData : [additionalData])
                .map(str => str.trim())
                .filter(Boolean)
                .join(`\n`);
            return [data, processedString].join(``);
        });
        return this;
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudSassOptions.prototype, "importGlobal", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudSassOptions.prototype, "registerGlobal", null);
BudSassOptions = __decorate([
    options({
        additionalData: undefined,
        implementation: undefined,
        sourceMap: true,
        warnRuleAsWarning: true,
    })
], BudSassOptions);
