import type { Items, Loaders, Rules } from '@roots/bud-framework';
import type { Configuration } from '@roots/bud-framework/config';
import type * as Base from '@roots/bud-framework/services/build';
import { Service } from '@roots/bud-framework/service';
import type { Options as RuleOptions } from './rule/index.js';
import { register } from './handlers/register.js';
import { Item } from './item/index.js';
import { Loader } from './loader/index.js';
import { Rule } from './rule/index.js';
/**
 * Webpack configuration builder class
 */
export declare class Build extends Service implements Base.Service {
    /**
     * Built config object
     */
    config: Partial<Configuration>;
    /**
     * Registered items
     */
    items: Items;
    /**
     * Registered loaders
     */
    loaders: Loaders;
    /**
     * Service register event
     *
     * @remarks
     * `loaders`, `items`, and `rules` are instantiated dumbly
     * because it is painful to think about how to map the typings..
     */
    register: typeof register;
    /**
     * Registered rules
     */
    rules: Rules;
    /**
     * Get item
     */
    getItem(name: `${keyof Items & string}`): Item;
    /**
     * Get loader
     */
    getLoader(name: string): Loader;
    /**
     * Get rule
     */
    getRule<K extends `${keyof Rules & string}`>(ident: K): Rules[K];
    /**
     * Make webpack configuration
     */
    make(): Promise<Configuration>;
    /**
     * Make item
     */
    makeItem(options?: Partial<Item['options']>): Item;
    /**
     * Make loader
     */
    makeLoader(src?: string, definition?: string): Loader;
    /**
     * Make Rule
     */
    makeRule(options?: RuleOptions): Rule;
    /**
     * Set item
     */
    setItem<K extends `${keyof Items & string}`>(ident: K, options?: ((item: Items[K]) => Items[K]) | Items[K]['options']): this;
    /**
     * Set loader
     */
    setLoader<K extends `${keyof Loaders & string}`>(name: K, definition?: any): this;
    /**
     * Set Rule
     */
    setRule<K extends `${keyof Rules & string}`>(name: K, input?: Rule | RuleOptions): this;
}
